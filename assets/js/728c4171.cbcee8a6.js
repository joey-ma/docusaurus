"use strict";(self.webpackChunkdocusaurus_v2=self.webpackChunkdocusaurus_v2||[]).push([[9439],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,k=c["".concat(p,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(k,i(i({ref:t},u),{},{components:n})):r.createElement(k,i({ref:t},u))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9037:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(4137));const o={},i="Docker",l={unversionedId:"Docker/docker",id:"Docker/docker",title:"Docker",description:"CLI Basics",source:"@site/docs/Docker/docker.md",sourceDirName:"Docker",slug:"/Docker/",permalink:"/docusaurus.v2/docs/Docker/",draft:!1,editUrl:"https://github.com/joey-ma/docusaurus.v2/tree/main/docs/Docker/docker.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Google Chrome DevTools",permalink:"/docusaurus.v2/docs/DevTools/Google Chrome"},next:{title:"JavaScript",permalink:"/docusaurus.v2/docs/category/javascript"}},p={},s=[{value:"CLI Basics",id:"cli-basics",level:2},{value:"Building multi-platform images",id:"building-multi-platform-images",level:2},{value:"References:",id:"references",level:3}],u={toc:s},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"docker"},"Docker"),(0,a.kt)("h2",{id:"cli-basics"},"CLI Basics"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"docker start")," to start one or more stopped containers. ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/reference/commandline/start/"},"Docs")),(0,a.kt)("p",null,"For example, starting 2 containers at the same time:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker start peopledepot_web_1 peopledepot_db_1 \n")),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"docker stop")," to stop one or more stopped containers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker stop peopledepot_web_1 peopledepot_db_1 \n")),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"docker container ls")," lists all the currently running docker containers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'peopledepot % docker container ls\nCONTAINER ID   IMAGE                  COMMAND                  CREATED          STATUS          PORTS                    NAMES\n0a2a1a617c0c   peopledepot-web        "/usr/src/app/entryp\u2026"   37 minutes ago   Up 37 minutes   0.0.0.0:8000->8000/tcp   peopledepot-web-1\n4a1f98f98a54   postgres:13.0-alpine   "docker-entrypoint.s\u2026"   37 minutes ago   Up 37 minutes   5432/tcp                 peopledepot-db-1\n')),(0,a.kt)("p",null,"If there are no containers running, this also can tell us if Docker is running in the background. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"% docker container ls\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\n\n# no container is running, but Docker the application is running. \n\n% docker container ls\nCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\n\n# it will explicitly remind us that docker daemon may not be running.\n")),(0,a.kt)("h2",{id:"building-multi-platform-images"},"Building multi-platform images"),(0,a.kt)("p",null,"When you invoke a build, you can set the ",(0,a.kt)("inlineCode",{parentName:"p"},"--platform")," flag to specify the target platform for the build output, (for example, ",(0,a.kt)("inlineCode",{parentName:"p"},"linux/amd64"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"linux/arm64"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"darwin/amd64"),"). See ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/build/building/multi-platform/#build-multi-arch-images-with-buildx"},"Building multi-platform images"),"."),(0,a.kt)("p",null,"Run the ",(0,a.kt)("inlineCode",{parentName:"p"},"docker buildx ls")," command to list the existing builders:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"% docker buildx ls \nNAME/NODE       DRIVER/ENDPOINT STATUS  BUILDKIT PLATFORMS\ndefault *       docker                           \n  default       default         running 20.10.22 linux/arm64, linux/amd64, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/arm/v7, linux/arm/v6\ndesktop-linux   docker                           \n  desktop-linux desktop-linux   running 20.10.22 linux/arm64, linux/amd64, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/arm/v7, linux/arm/v6\n")),(0,a.kt)("p",null,"This displays the default builtin driver, that uses the BuildKit server components built directly into the docker engine, also known as the ",(0,a.kt)("inlineCode",{parentName:"p"},"docker")," driver.\nWhile you can create a new builder to access more complex features like multi-platform builds (see ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/build/building/multi-platform/#getting-started"},"Multi-Platform/Getting Started")," for more details), you could also just pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"--platform")," flag into your build command. "),(0,a.kt)("p",null,"Here is an build command without the ",(0,a.kt)("inlineCode",{parentName:"p"},"--platform")," flag. The ",(0,a.kt)("inlineCode",{parentName:"p"},"-t")," flag adds a name and optionally a tag in the ",(0,a.kt)("inlineCode",{parentName:"p"},"name:tag")," format:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t people-depot-backend-dev .\n")),(0,a.kt)("p",null,"And we can pass in the ",(0,a.kt)("inlineCode",{parentName:"p"},"--platform")," flag like so to build a Docker image setting the --platform to be ",(0,a.kt)("inlineCode",{parentName:"p"},"linux/amd64"),"://  m."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker build --platform=linux/amd64 -t people-depot-backend-dev .\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://nodejs.org/en/docs/guides/nodejs-docker-webapp/"},"Dockerizing a Node.js web app")),(0,a.kt)("p",null,"To only deploy your backend server, here is a really good sample project:"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/GoogleCloudPlatform/serverless-expeditions/tree/main/hosting-a-rest-api-with-a-cloud-firestore-backend"},"https://github.com/GoogleCloudPlatform/serverless-expeditions/tree/main/hosting-a-rest-api-with-a-cloud-firestore-backend")),(0,a.kt)("p",null,"Together with a YouTube walk-through @ ",(0,a.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=M53VqNtioxE"},"Google Cloud Tech")),(0,a.kt)("h3",{id:"references"},"References:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=-UobUxpW6WQ"},"How to Deploy your Serverless Full-Stack App with Google Cloud Run and MongoDB Atlas @ YouTube"))),(0,a.kt)("p",null,"The command ",(0,a.kt)("inlineCode",{parentName:"p"},'docker run -entrypoint="/bin/bash" -i test')," runs a Docker container using the specified options."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"docker run")," is the command to run a new Docker container."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'-entrypoint="/bin/bash"')," sets the default command that will be executed when the container starts. In this case, the default command is /bin/bash, which will run the Bash shell inside the container."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-i")," specifies that the container should run in interactive mode, allowing input from the keyboard and output to the terminal."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"test")," is the name or ID of the Docker image to use for the container.")),(0,a.kt)("p",null,"In summary, this command runs a Docker container using the test image and starts the Bash shell in interactive mode. The user can then interact with the shell and perform commands inside the container."))}d.isMDXComponent=!0}}]);